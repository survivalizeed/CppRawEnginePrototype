	i32 var = 0;
	for (i32 i = 0; i < 4; i++, var += 50) {
		sur::Instancer::Add(new sur::Object("C:\\Users\\gero\\Desktop\\Hardcore Engine\\Hgineres\\survivalizeed.Hgineres", { var, 0 }, "shot" + std::to_string(i), 50), Types::Obj);
	}
		
		
		
		for (i32 i = 0; i < 4; i++) {
			sur::Instancer::GetObj("shot" + std::to_string(i))->Bind(true, ColliderType::Outline);
		}
		if (_input.keyboard.Key(Keys::W))
			sur::Camera::Move({ 0,20 });
		if (_input.keyboard.Key(Keys::A))
			sur::Camera::Move({ -20,0 });
		if (_input.keyboard.Key(Keys::S))
			sur::Camera::Move({ 0,-20 });
		if (_input.keyboard.Key(Keys::D))
			sur::Camera::Move({ 20,0 });
		if (_input.keyboard.Key(Keys::F))
			sur::Instancer::GetObj("shot0")->Move({ 2,0 }, false);

			//auto arot = [&](sur::Vec2 pos, sur::Vec2 origin, i32 Angle) -> sur::Vec2 {
//	Angle *= PI / 180;
//	sur::Vec2 pos_new;
//	f32 angle;
//	sur::Vec2 dist(pos - origin);
//	f32 hypothenuse = dist.magnitude();
//	angle = atan((f32)dist.y / (f32)dist.x) + Angle;
//	pos_new((i32)(cos(angle) * hypothenuse + 0.5f),
//		(i32)(sin(angle) * hypothenuse + 0.5f));
//	return pos_new + origin;
//};
//if (xb && yb) {
//	angle = atan((f32)dist.x / (f32)dist.y) + Angle + PI / 2;
//	pos_new((i32)(cos(angle) * hypothenuse + 0.5f),
//		(i32)(sin(angle) * hypothenuse + 0.5f));
//}
//if (xb && !yb) {
//	angle = atan((f32)dist.y / (f32)dist.x) + Angle + PI;
//	pos_new((i32)(sin(angle) * hypothenuse + 0.5f),
//		(i32)(cos(angle) * hypothenuse + 0.5f));
//}
//if (!xb && yb) {
//	angle = atan((f32)dist.x / (f32)dist.y) + Angle + 3 * PI / 2;
//	pos_new((i32)(sin(angle) * hypothenuse + 0.5f),
//		(i32)(cos(angle) * hypothenuse + 0.5f));
//}

		sur::Instancer::Get<sur::Rectangle>(Types::Rectangle, "", 0)->Bind(true, true);
		sur::Instancer::Get<sur::Rectangle>(Types::Rectangle, "", 1)->Bind(true, true);
		if (_input.keyboard.Key(Keys::A)) {
			sur::Camera::Move({ -1, 0});
		}
		if (_input.keyboard.Key(Keys::D)) {
			sur::Camera::Move({ 1, 0 });
		}
		if (_input.keyboard.Key(Keys::W)) {
			sur::Camera::Move({ 0, -1 });
		}
		if (_input.keyboard.Key(Keys::S)) {
			sur::Camera::Move({ 0, 1 });
		}	







		cuboid.Bind(true, 160);
		cuboid.Rotate(Dimension::Z, angle);
		cuboid.Rotate(Dimension::X, angle);
		cuboid.Rotate(Dimension::Y, angle);
		_Amap.Render(cuboid.origin.toVec2(), Color(255, 255, 255));

		if (sur::GetMilliseconds() - snap >= _milliseconds(10)) {
			if (_input.keyboard.Key(Keys::Q)) {
				cuboid.Move({ 0,0,1 });
			}
			if (_input.keyboard.Key(Keys::E)) {
				cuboid.Move({ 0,0,-1 });
			}
			if (_input.keyboard.Key(Keys::W)) {
				cuboid.Move({ 0,1,0 });
			}
			if (_input.keyboard.Key(Keys::S)) {
				cuboid.Move({ 0,-1,0 });
			}
			if (_input.keyboard.Key(Keys::A)) {	
				cuboid.Move({ -1,0,0 });
			}
			if (_input.keyboard.Key(Keys::D)) {
				cuboid.Move({ 1,0,0 });
			}
			if (_input.keyboard.Key(Keys::J)) {
				cuboid.Rotate(Dimension::Z, ++angle);
			}
			//angle += 1;
			snap = sur::GetMilliseconds();
		}