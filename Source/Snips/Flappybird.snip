#include "Functional/includes.h"
#include "Functional/functional.h"
#include "Lua/SurLua.h"

lua_State* Start();
extern void Window(const char* name, int params);
extern sur::Map_Analyses _Amap;
extern sur::Input _input;

using sur::Instancer::Types;


int main() {
	lua_State* LC = Start();

	sur::Render renderer(Color(0, 0, 0),true,1);
	renderer.DebugConsole(true);
	renderer.FPS();

	i32 yPosTube = _window_size.y - 227;

	sur::Instancer::Add(new sur::Object(_resource_path + "Tube.hgineres", { 0, 0 }, "TubeUp", 1), Types::Object);
	sur::Instancer::Add(new sur::Object(_resource_path + "Tubeflip.hgineres", { 0, 0 }, "TubeDown", 1), Types::Object);
	sur::Instancer::Add(new sur::Object(_resource_path + "Flappy.hgineres", { 0, 0 }, "Player", 1), Types::Object);


	for (;;) {
		renderer.ClearScreenBuffer();
		
		using namespace sur::Instancer;

		Add(new sur::Object(Get<sur::Object>("TubeUp"), { _window_size.x, 0},"TubeUp1",1),Types::Object);
		Add(new sur::Object(Get<sur::Object>("TubeUp"), { _window_size.x, 0 }, "TubeUp2", 1), Types::Object);

		renderer.RenderScreenBuffer();
	}
}

lua_State* Start(){
	lua_State* L = lua::LoadFile("F:\\C++\\Hgine\\Hgine\\Source\\Lua\\config.lua");
	_debug = stoi(lua::GetTableContent(L, "configuration", "debug_mode"));

	_window_size(stoi(lua::GetTableContent(L, "configuration", "window_size_x")),
		stoi(lua::GetTableContent(L, "configuration", "window_size_y")));

	_resource_path = lua::GetTableContent(L, "configuration", "resource_path");

	_sound_path = lua::GetTableContent(L, "configuration", "sound_path");

	_map = sur::Initialize();

	_Amap(_map, _window_size);

	//Create the Window with some parameters
	Window(lua::GetTableContent(L, "configuration", "application_name").c_str(), WS_OVERLAPPEDWINDOW);

	return L;
}